# Workflow untuk melakukan CI pipeline untuk dua branch: karsajobs (backend) dan karsajobs-ui (frontend)
name: CI Pipeline

# Workflow ini berjalan hanya pada branch tertentu saat terjadi push
on:
  push:
    branches:
      - karsajobs
      - karsajobs-ui
  workflow_dispatch:

# Menentukan environment yang digunakan (ubuntu-latest VM dari GitHub)
jobs:
  build:
    runs-on: ubuntu-latest

    # Menentukan matrix job untuk dua branch yang berbeda
    strategy:
      matrix:
        branch: [karsajobs, karsajobs-ui]

    # Langkah-langkah yang dijalankan di setiap job
    steps:
      # Step 1: Checkout kode dari branch yang sedang berjalan
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker untuk kebutuhan build & push image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Login ke GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Lint Dockerfile menggunakan Hadolint
      - name: Lint Dockerfile with Hadolint
        run: |
          curl -LO https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          if [[ -f Dockerfile ]]; then
            ./hadolint-Linux-x86_64 Dockerfile
          else
            echo "No Dockerfile found in this branch."
          fi

      # Step 5 (Opsional): Unit test hanya dijalankan jika branch == karsajobs (backend)
      - name: Run Go unit tests
        if: matrix.branch == 'karsajobs'
        run: |
          go version  # Mengecek versi Go
          go test -v -short --count=1 $(go list ./...)

      # Step 6: Build dan Push image ke GHCR
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ matrix.branch }}"
          COMMIT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t $IMAGE_NAME:$COMMIT_SHA .
          docker push $IMAGE_NAME:$COMMIT_SHA
